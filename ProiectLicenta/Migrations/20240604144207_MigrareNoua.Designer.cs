// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ProiectLicenta.Data;

#nullable disable

namespace ProiectLicenta.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240604144207_MigrareNoua")]
    partial class MigrareNoua
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ProiectLicenta.Models.Angajat", b =>
                {
                    b.Property<int>("CodAngajat")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CodAngajat"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Functie")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Nume")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Prenume")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Telefon")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("CodAngajat");

                    b.ToTable("Angajat");
                });

            modelBuilder.Entity("ProiectLicenta.Models.Contact", b =>
                {
                    b.Property<int>("CodContact")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CodContact"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Mesaj")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("Nume")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Subiect")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("CodContact");

                    b.ToTable("Contact");
                });

            modelBuilder.Entity("ProiectLicenta.Models.Daunatori", b =>
                {
                    b.Property<int>("CodDaunator")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CodDaunator"));

                    b.Property<int>("CodTratament")
                        .HasColumnType("int");

                    b.Property<string>("Denumire")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("CodDaunator");

                    b.HasIndex("CodTratament");

                    b.ToTable("Daunatori");
                });

            modelBuilder.Entity("ProiectLicenta.Models.Parcela", b =>
                {
                    b.Property<int>("CodParcela")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CodParcela"));

                    b.Property<int>("CodRasad")
                        .HasColumnType("int");

                    b.Property<string>("Locatie")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("NumarPlante")
                        .HasColumnType("int");

                    b.Property<int>("Suprafata")
                        .HasColumnType("int");

                    b.Property<string>("Tip")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("CodParcela");

                    b.HasIndex("CodRasad");

                    b.ToTable("Parcela");
                });

            modelBuilder.Entity("ProiectLicenta.Models.Rasaduri", b =>
                {
                    b.Property<int>("CodRasad")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CodRasad"));

                    b.Property<int>("Cantitate")
                        .HasColumnType("int");

                    b.Property<DateTime>("DataMaturitate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DataSemanat")
                        .HasColumnType("datetime2");

                    b.Property<string>("Denumire")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Planta")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("CodRasad");

                    b.ToTable("Rasad");
                });

            modelBuilder.Entity("ProiectLicenta.Models.RegistruCopilire", b =>
                {
                    b.Property<int>("CodCopilire")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CodCopilire"));

                    b.Property<int>("CodAngajat")
                        .HasColumnType("int");

                    b.Property<int>("CodParcela")
                        .HasColumnType("int");

                    b.Property<DateTime>("DataCopilire")
                        .HasColumnType("datetime2");

                    b.Property<int>("NumarPlante")
                        .HasColumnType("int");

                    b.HasKey("CodCopilire");

                    b.HasIndex("CodAngajat");

                    b.HasIndex("CodParcela");

                    b.ToTable("RegistruCopilire");
                });

            modelBuilder.Entity("ProiectLicenta.Models.RegistruFertilizare", b =>
                {
                    b.Property<int>("CodFertilizare")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CodFertilizare"));

                    b.Property<int>("CodAngajat")
                        .HasColumnType("int");

                    b.Property<int>("CodParcela")
                        .HasColumnType("int");

                    b.Property<DateTime>("DataFertilizare")
                        .HasColumnType("datetime2");

                    b.Property<int>("Suprafata")
                        .HasColumnType("int");

                    b.HasKey("CodFertilizare");

                    b.HasIndex("CodAngajat");

                    b.HasIndex("CodParcela");

                    b.ToTable("RegistruFertilizare");
                });

            modelBuilder.Entity("ProiectLicenta.Models.RegistruIrigare", b =>
                {
                    b.Property<int>("CodIrigare")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CodIrigare"));

                    b.Property<int>("CodAngajat")
                        .HasColumnType("int");

                    b.Property<int>("CodParcela")
                        .HasColumnType("int");

                    b.Property<DateTime>("DataIrigare")
                        .HasColumnType("datetime2");

                    b.Property<int>("DurataIrigare")
                        .HasColumnType("int");

                    b.HasKey("CodIrigare");

                    b.HasIndex("CodAngajat");

                    b.HasIndex("CodParcela");

                    b.ToTable("RegistruIrigare");
                });

            modelBuilder.Entity("ProiectLicenta.Models.RegistruPalisare", b =>
                {
                    b.Property<int>("CodPalisare")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CodPalisare"));

                    b.Property<int>("CodAngajat")
                        .HasColumnType("int");

                    b.Property<int>("CodParcela")
                        .HasColumnType("int");

                    b.Property<DateTime>("DataPalisare")
                        .HasColumnType("datetime2");

                    b.Property<int>("NumarPlante")
                        .HasColumnType("int");

                    b.HasKey("CodPalisare");

                    b.HasIndex("CodAngajat");

                    b.HasIndex("CodParcela");

                    b.ToTable("RegistruPalisare");
                });

            modelBuilder.Entity("ProiectLicenta.Models.RegistruRecoltare", b =>
                {
                    b.Property<int>("CodRecoltare")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CodRecoltare"));

                    b.Property<int>("CantitateRecoltata")
                        .HasColumnType("int");

                    b.Property<int>("CodAngajat")
                        .HasColumnType("int");

                    b.Property<int>("CodParcela")
                        .HasColumnType("int");

                    b.Property<DateTime>("DataRecoltare")
                        .HasColumnType("datetime2");

                    b.HasKey("CodRecoltare");

                    b.HasIndex("CodAngajat");

                    b.HasIndex("CodParcela");

                    b.ToTable("RegistruRecoltare");
                });

            modelBuilder.Entity("ProiectLicenta.Models.RegistruTratamente", b =>
                {
                    b.Property<int>("CodTratamentAplicat")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CodTratamentAplicat"));

                    b.Property<int>("CodAngajat")
                        .HasColumnType("int");

                    b.Property<int>("CodDaunator")
                        .HasColumnType("int");

                    b.Property<int>("CodParcela")
                        .HasColumnType("int");

                    b.Property<DateTime>("DataAplicare")
                        .HasColumnType("datetime2");

                    b.Property<int>("Suprafata")
                        .HasColumnType("int");

                    b.HasKey("CodTratamentAplicat");

                    b.HasIndex("CodAngajat");

                    b.HasIndex("CodDaunator");

                    b.HasIndex("CodParcela");

                    b.ToTable("RegistruTratamente");
                });

            modelBuilder.Entity("ProiectLicenta.Models.Tratament", b =>
                {
                    b.Property<int>("CodTratament")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CodTratament"));

                    b.Property<int>("Cantitate")
                        .HasColumnType("int");

                    b.Property<string>("Denumire")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Perioada")
                        .HasColumnType("int");

                    b.HasKey("CodTratament");

                    b.ToTable("Tratament");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProiectLicenta.Models.Daunatori", b =>
                {
                    b.HasOne("ProiectLicenta.Models.Tratament", "Tratament")
                        .WithMany("Daunatori")
                        .HasForeignKey("CodTratament")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tratament");
                });

            modelBuilder.Entity("ProiectLicenta.Models.Parcela", b =>
                {
                    b.HasOne("ProiectLicenta.Models.Rasaduri", "Rasaduri")
                        .WithMany("Parcela")
                        .HasForeignKey("CodRasad")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Rasaduri");
                });

            modelBuilder.Entity("ProiectLicenta.Models.RegistruCopilire", b =>
                {
                    b.HasOne("ProiectLicenta.Models.Angajat", "Angajat")
                        .WithMany("RegistruCopilire")
                        .HasForeignKey("CodAngajat")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProiectLicenta.Models.Parcela", "Parcela")
                        .WithMany("RegistruCopilire")
                        .HasForeignKey("CodParcela")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Angajat");

                    b.Navigation("Parcela");
                });

            modelBuilder.Entity("ProiectLicenta.Models.RegistruFertilizare", b =>
                {
                    b.HasOne("ProiectLicenta.Models.Angajat", "Angajat")
                        .WithMany("RegistruFertilizare")
                        .HasForeignKey("CodAngajat")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProiectLicenta.Models.Parcela", "Parcela")
                        .WithMany("RegistruFertilizare")
                        .HasForeignKey("CodParcela")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Angajat");

                    b.Navigation("Parcela");
                });

            modelBuilder.Entity("ProiectLicenta.Models.RegistruIrigare", b =>
                {
                    b.HasOne("ProiectLicenta.Models.Angajat", "Angajat")
                        .WithMany("RegistruIrigare")
                        .HasForeignKey("CodAngajat")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProiectLicenta.Models.Parcela", "Parcela")
                        .WithMany("RegistruIrigare")
                        .HasForeignKey("CodParcela")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Angajat");

                    b.Navigation("Parcela");
                });

            modelBuilder.Entity("ProiectLicenta.Models.RegistruPalisare", b =>
                {
                    b.HasOne("ProiectLicenta.Models.Angajat", "Angajat")
                        .WithMany("RegistruPalisare")
                        .HasForeignKey("CodAngajat")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProiectLicenta.Models.Parcela", "Parcela")
                        .WithMany("RegistruPalisare")
                        .HasForeignKey("CodParcela")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Angajat");

                    b.Navigation("Parcela");
                });

            modelBuilder.Entity("ProiectLicenta.Models.RegistruRecoltare", b =>
                {
                    b.HasOne("ProiectLicenta.Models.Angajat", "Angajat")
                        .WithMany("RegistruRecoltare")
                        .HasForeignKey("CodAngajat")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProiectLicenta.Models.Parcela", "Parcela")
                        .WithMany("RegistruRecoltare")
                        .HasForeignKey("CodParcela")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Angajat");

                    b.Navigation("Parcela");
                });

            modelBuilder.Entity("ProiectLicenta.Models.RegistruTratamente", b =>
                {
                    b.HasOne("ProiectLicenta.Models.Angajat", "Angajat")
                        .WithMany("RegistruTratamente")
                        .HasForeignKey("CodAngajat")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProiectLicenta.Models.Daunatori", "Daunatori")
                        .WithMany("RegistruTratamente")
                        .HasForeignKey("CodDaunator")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProiectLicenta.Models.Parcela", "Parcela")
                        .WithMany("RegistruTratamente")
                        .HasForeignKey("CodParcela")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Angajat");

                    b.Navigation("Daunatori");

                    b.Navigation("Parcela");
                });

            modelBuilder.Entity("ProiectLicenta.Models.Angajat", b =>
                {
                    b.Navigation("RegistruCopilire");

                    b.Navigation("RegistruFertilizare");

                    b.Navigation("RegistruIrigare");

                    b.Navigation("RegistruPalisare");

                    b.Navigation("RegistruRecoltare");

                    b.Navigation("RegistruTratamente");
                });

            modelBuilder.Entity("ProiectLicenta.Models.Daunatori", b =>
                {
                    b.Navigation("RegistruTratamente");
                });

            modelBuilder.Entity("ProiectLicenta.Models.Parcela", b =>
                {
                    b.Navigation("RegistruCopilire");

                    b.Navigation("RegistruFertilizare");

                    b.Navigation("RegistruIrigare");

                    b.Navigation("RegistruPalisare");

                    b.Navigation("RegistruRecoltare");

                    b.Navigation("RegistruTratamente");
                });

            modelBuilder.Entity("ProiectLicenta.Models.Rasaduri", b =>
                {
                    b.Navigation("Parcela");
                });

            modelBuilder.Entity("ProiectLicenta.Models.Tratament", b =>
                {
                    b.Navigation("Daunatori");
                });
#pragma warning restore 612, 618
        }
    }
}
